"use client";

import React, { useRef, useEffect, useCallback } from 'react';
import { cn } from "@/lib/utils";
import {
  TrendingUp,
  Database,
  LineChart,
  Shield,
  Globe,
  Brain,
  Activity,
} from "lucide-react";
import { gsap } from 'gsap';
import { InertiaPlugin } from 'gsap/InertiaPlugin';

gsap.registerPlugin(InertiaPlugin);

interface InteractiveGridProps {
  dotSize?: number;
  gap?: number;
  baseColor?: string;
  activeColor?: string;
  proximity?: number;
  className?: string;
}

const InteractiveGrid: React.FC<InteractiveGridProps> = ({
  dotSize = 8,
  gap = 12,
  baseColor = '#1e293b',
  activeColor = '#64748b',
  proximity = 100,
  className = ''
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const dotsRef = useRef<HTMLDivElement[]>([]);
  const centresRef = useRef<{ el: HTMLDivElement; x: number; y: number }[]>([]);

  const buildGrid = useCallback(() => {
    const container = containerRef.current;
    if (!container) return;
    container.innerHTML = '';
    dotsRef.current = [];
    centresRef.current = [];
    const { width: w, height: h } = container.getBoundingClientRect();
    const cols = Math.floor((w + gap) / (dotSize + gap));
    const rows = Math.floor((h + gap) / (dotSize + gap));
    const total = cols * rows;
    const frag = document.createDocumentFragment();
    for (let i = 0; i < total; i++) {
      const dot = document.createElement('div');
      dot.style.width = `${dotSize}px`;
      dot.style.height = `${dotSize}px`;
      dot.style.borderRadius = '50%';
      dot.style.willChange = 'transform, background-color';
      gsap.set(dot, { x: 0, y: 0, backgroundColor: baseColor });
      frag.appendChild(dot);
      dotsRef.current.push(dot);
    }
    container.appendChild(frag);
    requestAnimationFrame(() => {
      const rect = container.getBoundingClientRect();
      centresRef.current = dotsRef.current.map(el => {
        const r = el.getBoundingClientRect();
        return {
          el,
          x: r.left - rect.left + r.width / 2,
          y: r.top - rect.top + r.height / 2
        };
      });
    });
  }, [dotSize, gap, baseColor]);

  useEffect(() => {
    buildGrid();
    const ro = new ResizeObserver(buildGrid);
    if (containerRef.current) ro.observe(containerRef.current);
    return () => ro.disconnect();
  }, [buildGrid]);

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;
    const handler = (e: PointerEvent) => {
      const rect = container.getBoundingClientRect();
      const mx = e.clientX - rect.left;
      const my = e.clientY - rect.top;
      requestAnimationFrame(() => {
        centresRef.current.forEach(({ el, x, y }) => {
          const d = Math.hypot(x - mx, y - my);
          const t = Math.max(0, 1 - d / proximity);
          gsap.to(el, {
            backgroundColor: gsap.utils.interpolate(baseColor, activeColor, t),
            duration: 0.1
          });
        });
      });
    };
    container.addEventListener('pointermove', handler);
    return () => container.removeEventListener('pointermove', handler);
  }, [baseColor, activeColor, proximity]);

  return (
    <div
      className={cn(
        "absolute inset-0 overflow-hidden transition-opacity duration-300 opacity-0 group-hover:opacity-50",
        className
      )}
    >
      <div ref={containerRef} className="w-full h-full" />
    </div>
  );
};

export type BentoItem = {
  title: string;
  meta: string;
  description: string;
  icon: React.ReactNode;
  status: string;
  tags: string[];
  colSpan?: number;
  hasInteractiveGrid?: boolean;
  gradient?: string;
  glowRgba: string;
};

export interface BentoGridProps {
  items?: BentoItem[];
}

const defaultItems: BentoItem[] = [
  {
    title: "Adaptive Portfolio Signal Processing",
    meta: "LLM-Powered Insights",
    description: "AI-driven analysis aligns market events with your portfolio.",
    icon: <TrendingUp className="w-4 h-4 text-blue-400" />, status: "Live Signals",
    tags: ["Portfolio Context", "LLM Integration"],
    colSpan: 2,
    hasInteractiveGrid: true,
    gradient: "from-blue-400/10 via-cyan-400/5 to-transparent",
    glowRgba: "rgba(59,130,246,0.2)"
  },
  {
    title: "Contextual News Synthesis",
    meta: "Real-Time Feeds",
    description: "Curates news relevant to your holdings.",
    icon: <Database className="w-4 h-4 text-green-400" />, status: "Curated Updates",
    tags: ["News Aggregation", "Asset Context"],
    gradient: "from-green-400/10 via-teal-400/5 to-transparent",
    glowRgba: "rgba(16,185,129,0.2)"
  },
  {
    title: "Volatility Trend Metrics",
    meta: "High-Frequency Data",
    description: "Actionable volatility indicators from live data.",
    icon: <LineChart className="w-4 h-4 text-yellow-400" />, status: "Trend Signals",
    tags: ["Volatility Analysis", "Real-Time Metrics"],
    colSpan: 2,
    gradient: "from-yellow-400/10 via-orange-400/5 to-transparent",
    glowRgba: "rgba(234,179,8,0.2)"
  },
  {
    title: "Semantic Risk Assessment",
    meta: "Contextual Modeling",
    description: "Context-aware risk evaluations.",
    icon: <Shield className="w-4 h-4 text-purple-400" />, status: "Risk Insights",
    tags: ["Risk Analytics", "Semantic Depth"],
    gradient: "from-purple-400/10 via-violet-400/5 to-transparent",
    glowRgba: "rgba(192,38,211,0.2)"
  },
  {
    title: "Correlation Mapping",
    meta: "Multi-Asset Analysis",
    description: "Reveals inter-market links.",
    icon: <Globe className="w-4 h-4 text-sky-400" />, status: "Correlation Map",
    tags: ["Diversification", "Graph Insights"],
    gradient: "from-sky-400/10 via-blue-400/5 to-transparent",
    glowRgba: "rgba(56,189,248,0.2)"
  },
  {
    title: "Scenario Generator",
    meta: "Strategic Modeling",
    description: "LLM-driven market scenarios.",
    icon: <Brain className="w-4 h-4 text-pink-400" />, status: "Scenario Engine",
    tags: ["Scenario Planning", "AI Modeling"],
    gradient: "from-pink-400/10 via-rose-400/5 to-transparent",
    glowRgba: "rgba(236,72,153,0.2)"
  },
  {
    title: "Insight Pipeline",
    meta: "Unified Distribution",
    description: "Streams insights to your channels.",
    icon: <Activity className="w-4 h-4 text-indigo-400" />, status: "Live Feed",
    tags: ["Multi-Channel Delivery", "Automated Alerts"],
    gradient: "from-indigo-400/10 via-purple-400/5 to-transparent",
    glowRgba: "rgba(129,140,248,0.2)"
  }
];

const BentoGrid: React.FC<BentoGridProps> = ({ items = defaultItems }) => (
  <div className="grid grid-cols-1 md:grid-cols-3 gap-6 p-6 max-w-7xl mx-auto">
    {items.map((item, i) => (
      <div
        key={i}
        className={cn(
          "group relative p-6 rounded-2xl overflow-hidden bg-zinc-900",
          "transition-shadow transition-transform duration-700",
          "hover:-translate-y-2",
          `lg:shadow-[0_0_10px_${item.glowRgba}]`,
          `lg:hover:shadow-[0_0_40px_${item.glowRgba}]`,
          item.colSpan === 2 ? "md:col-span-2" : "col-span-1"
        )}
      >
        {item.hasInteractiveGrid && (
          <InteractiveGrid
            dotSize={6}
            gap={16}
            baseColor="rgba(148,163,184,0.2)"
            activeColor="rgba(59,130,246,0.4)"
            proximity={120}
          />
        )}
        <div
          className={cn(
            "absolute inset-0 transition-opacity duration-300 opacity-20 group-hover:opacity-60 bg-gradient-to-br",
            item.gradient
          )}
        />
        <div className="absolute inset-0 transition-opacity duration-300 opacity-10 group-hover:opacity-40 bg-[radial-gradient(circle,rgba(255,255,255,0.02)_1px,transparent_1px)] bg-[length:8px_8px]" />
        <div className="relative flex flex-col justify-between h-full text-white">
          <div>
            <div className="flex justify-between items-center">
              <div className="w-10 h-10 bg-zinc-800 backdrop-blur-sm border border-transparent rounded-xl flex items-center justify-center">
                {item.icon}
              </div>
              <span className="text-xs font-medium px-3 py-1.5 bg-zinc-800 border border-transparent rounded-full text-zinc-300">
                {item.status}
              </span>
            </div>
            <h3 className="mt-4 text-lg font-semibold text-white">
              {item.title} <span className="ml-2 text-sm text-zinc-400">{item.meta}</span>
            </h3>
            <p className="mt-2 text-sm text-zinc-400">{item.description}</p>
          </div>
          <div className="mt-4 flex flex-wrap gap-2">
            {item.tags.map((t, idx) => (
              <span key={idx} className="px-2.5 py-1 text-xs bg-zinc-800 backdrop-blur-sm border border-transparent rounded-md text-zinc-300">
                {t}
              </span>
            ))}
          </div>
        </div>
      </div>
    ))}
  </div>
);

export default function KymaBentoGrid() {
  return (
    <div className="min-h-screen bg-zinc-950 py-12">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-white mb-4">Kyma AI-Enhanced Portfolio Intelligence</h1>
        <p className="text-lg text-zinc-400 max-w-2xl mx-auto">
          Layered LLM-driven analysis synthesizing market signals and portfolio context into unified user insights
        </p>
      </div>
      <BentoGrid />
    </div>
  );
}
